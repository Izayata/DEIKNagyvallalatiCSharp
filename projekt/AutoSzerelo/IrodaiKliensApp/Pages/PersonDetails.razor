@page "/person/{id:int}"
@using SzerverApp.Contract
@using IrodaiKliensApp.Services
@inject IPersonService PersonService
@inject NavigationManager NavigationManager

@if (Person is null)
{
    <p>Loading...</p>
}
else
{
    <h3>@Person.Name's details</h3>

    <EditForm Model="@Person" OnValidSubmit="@HandleValidSubmitAsync">
        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText @bind-Value="@Person.Name" class="form-control"/>
        </div>
        <div class="mb-3">
            <label class="form-label">e-mail</label>
            <InputText @bind-Value="@Person.Email" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Birth date</label>
            <InputDate @bind-Value="@Person.BirthDate" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary form-control mb-3">Save Changes</button>
    </EditForm>

    <button @onclick="@HandleDeleteAsync" class="btn btn-danger form-control">Delete</button>

    @*<p>Name: @Person.Name</p>
    <p>e-Mail: @Person.Email</p>
    <p>Birth date: @Person.BirthDate</p>*@
}





@code {
    [Parameter]
    public int Id { get; set; }

    private Person? Person { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Person = await PersonService.GetPersonByIdAsync(Id);
    }

    private async Task HandleValidSubmitAsync()
    {
        await PersonService.UpdatePersonAsync(Id, Person!);
        NavigationManager.NavigateTo("/");
    }

    private async Task HandleDeleteAsync()
    {
        await PersonService.DeletePersonAsync(Id);
        NavigationManager.NavigateTo("/");
    }
}
